// üîç DIAGNOSTIC COMPLET SUPABASE - PROBL√àME R√îLES & D√âCONNEXION
// Copiez ce code dans la console (F12) pour diagnostiquer les probl√®mes

console.log('üîç DIAGNOSTIC COMPLET SUPABASE FINITIO');
console.log('=====================================');

// Fonction de diagnostic Supabase Auth
const diagnosticSupabaseAuth = async () => {
  console.log('üîê DIAGNOSTIC SUPABASE AUTH:');
  console.log('============================');
  
  try {
    // V√©rifier la connexion Supabase
    if (!window.supabase) {
      console.log('‚ùå Supabase client non trouv√© dans window.supabase');
      return null;
    }
    
    const supabase = window.supabase;
    console.log('‚úÖ Client Supabase trouv√©');
    
    // V√©rifier l'utilisateur connect√©
    const { data: authData, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.log('‚ùå Erreur Auth:', authError.message);
      return null;
    }
    
    if (!authData?.user) {
      console.log('‚ùå Aucun utilisateur connect√© dans Supabase Auth');
      return null;
    }
    
    const user = authData.user;
    console.log('‚úÖ Utilisateur Auth connect√©:');
    console.log('  üìß Email:', user.email);
    console.log('  üÜî UUID:', user.id);
    console.log('  üìÖ Cr√©√© le:', new Date(user.created_at).toLocaleString());
    console.log('  üîë Provider:', user.app_metadata?.provider || 'email');
    
    return user;
    
  } catch (error) {
    console.log('‚ùå Erreur diagnostic Auth:', error.message);
    return null;
  }
};

// Fonction de diagnostic table users
const diagnosticTableUsers = async (userAuth) => {
  console.log('');
  console.log('üë• DIAGNOSTIC TABLE USERS:');
  console.log('===========================');
  
  if (!userAuth) {
    console.log('‚ùå Pas d\'utilisateur Auth - impossible de v√©rifier la table');
    return null;
  }
  
  try {
    const supabase = window.supabase;
    
    // Recherche par UUID
    console.log('üîç Recherche par UUID:', userAuth.id);
    const { data: profileUUID, error: errorUUID } = await supabase
      .from('users')
      .select('*')
      .eq('id', userAuth.id)
      .single();
    
    if (profileUUID && !errorUUID) {
      console.log('‚úÖ Profil trouv√© par UUID:');
      console.log('  üìß Email:', profileUUID.email);
      console.log('  üë§ Nom:', profileUUID.nom);
      console.log('  üé≠ R√¥le:', profileUUID.role);
      console.log('  üÜî UUID:', profileUUID.id);
      return profileUUID;
    }
    
    console.log('‚ö†Ô∏è Profil non trouv√© par UUID, erreur:', errorUUID?.message);
    
    // Recherche par email (fallback)
    console.log('üîç Recherche par email:', userAuth.email);
    const { data: profileEmail, error: errorEmail } = await supabase
      .from('users')
      .select('*')
      .eq('email', userAuth.email)
      .single();
    
    if (profileEmail && !errorEmail) {
      console.log('‚úÖ Profil trouv√© par EMAIL:');
      console.log('  üìß Email:', profileEmail.email);
      console.log('  üë§ Nom:', profileEmail.nom);
      console.log('  üé≠ R√¥le:', profileEmail.role);
      console.log('  üÜî UUID:', profileEmail.id);
      console.log('  ‚ö†Ô∏è PROBL√àME: UUID diff√©rent entre Auth et table !');
      console.log('    Auth UUID:', userAuth.id);
      console.log('    Table UUID:', profileEmail.id);
      return profileEmail;
    }
    
    console.log('‚ùå Profil non trouv√© par email, erreur:', errorEmail?.message);
    
    // Lister tous les utilisateurs pour debug
    console.log('üîç Liste de TOUS les utilisateurs dans la table:');
    const { data: allUsers, error: allError } = await supabase
      .from('users')
      .select('id, email, nom, role')
      .limit(10);
    
    if (allUsers && !allError) {
      console.log(`üìä ${allUsers.length} utilisateur(s) trouv√©(s):`);
      allUsers.forEach((u, index) => {
        console.log(`  ${index + 1}. ${u.email} - ${u.role} (UUID: ${u.id})`);
      });
    } else {
      console.log('‚ùå Impossible de lister les utilisateurs:', allError?.message);
    }
    
    return null;
    
  } catch (error) {
    console.log('‚ùå Erreur diagnostic table users:', error.message);
    return null;
  }
};

// Fonction de test de redirection par r√¥le
const testRedirectionRole = (profile) => {
  console.log('');
  console.log('üéØ TEST REDIRECTION R√îLE:');
  console.log('==========================');
  
  if (!profile?.role) {
    console.log('‚ùå Aucun r√¥le trouv√© - impossible de tester la redirection');
    return;
  }
  
  const role = profile.role.toLowerCase();
  console.log('üé≠ R√¥le d√©tect√©:', role);
  
  const redirections = {
    'client': '/dashboard-client',
    'architecte': '/dashboard-architecte',
    'prestataire': '/dashboard-prestataire',
    'fournisseur': '/dashboard-fournisseur'
  };
  
  const targetUrl = redirections[role];
  
  if (targetUrl) {
    console.log('‚úÖ Redirection attendue:', targetUrl);
    console.log('üåê URL actuelle:', window.location.pathname);
    
    if (window.location.pathname === targetUrl) {
      console.log('‚úÖ Utilisateur sur la bonne page !');
    } else {
      console.log('‚ö†Ô∏è Utilisateur sur la mauvaise page !');
      console.log('üí° Devrait √™tre redirig√© vers:', targetUrl);
    }
  } else {
    console.log('‚ùå R√¥le non reconnu pour redirection:', role);
    console.log('üí° R√¥les valides:', Object.keys(redirections));
  }
};

// Fonction de correction automatique
const correctionAutomatique = async (userAuth, profile) => {
  console.log('');
  console.log('üîß CORRECTION AUTOMATIQUE:');
  console.log('===========================');
  
  if (!userAuth) {
    console.log('‚ùå Pas d\'utilisateur Auth - correction impossible');
    return;
  }
  
  const supabase = window.supabase;
  
  try {
    if (!profile) {
      console.log('üîß Cr√©ation du profil utilisateur manquant...');
      
      // Cr√©er le profil avec l'UUID de Auth
      const { data: newProfile, error: createError } = await supabase
        .from('users')
        .insert([{
          id: userAuth.id,
          email: userAuth.email,
          nom: userAuth.email.split('@')[0],
          role: 'client' // R√¥le par d√©faut
        }])
        .select()
        .single();
      
      if (newProfile && !createError) {
        console.log('‚úÖ Profil cr√©√© avec succ√®s:', newProfile);
        return newProfile;
      } else {
        console.log('‚ùå Erreur cr√©ation profil:', createError?.message);
      }
    } else if (profile.id !== userAuth.id) {
      console.log('üîß Correction UUID du profil...');
      
      // Mettre √† jour l'UUID du profil pour correspondre √† Auth
      const { data: updatedProfile, error: updateError } = await supabase
        .from('users')
        .update({ id: userAuth.id })
        .eq('email', userAuth.email)
        .select()
        .single();
      
      if (updatedProfile && !updateError) {
        console.log('‚úÖ UUID corrig√© avec succ√®s:', updatedProfile);
        return updatedProfile;
      } else {
        console.log('‚ùå Erreur correction UUID:', updateError?.message);
      }
    } else {
      console.log('‚úÖ Profil d√©j√† correct - aucune correction n√©cessaire');
      return profile;
    }
  } catch (error) {
    console.log('‚ùå Erreur correction automatique:', error.message);
  }
  
  return null;
};

// Fonction principale de diagnostic
const diagnosticComplet = async () => {
  console.log('üöÄ D√âBUT DU DIAGNOSTIC COMPLET...');
  console.log('');
  
  // 1. Diagnostic Auth
  const userAuth = await diagnosticSupabaseAuth();
  
  // 2. Diagnostic table users
  const profile = await diagnosticTableUsers(userAuth);
  
  // 3. Test redirection
  testRedirectionRole(profile);
  
  // 4. Correction automatique si n√©cessaire
  const profileCorrige = await correctionAutomatique(userAuth, profile);
  
  console.log('');
  console.log('üìã R√âSUM√â DU DIAGNOSTIC:');
  console.log('========================');
  console.log('üîê Auth Supabase:', userAuth ? '‚úÖ OK' : '‚ùå PROBL√àME');
  console.log('üë• Profil table:', profile ? '‚úÖ OK' : '‚ùå MANQUANT');
  console.log('üîó Synchronisation:', (profile && userAuth && profile.id === userAuth.id) ? '‚úÖ OK' : '‚ùå D√âSYNCHRONIS√â');
  console.log('üé≠ R√¥le d√©fini:', profile?.role ? `‚úÖ ${profile.role}` : '‚ùå MANQUANT');
  
  return {
    userAuth,
    profile: profileCorrige || profile,
    isSync: profile && userAuth && profile.id === userAuth.id,
    hasRole: !!profile?.role
  };
};

// Fonction de d√©connexion forc√©e corrig√©e
const deconnexionForceeCorrigee = async () => {
  console.log('üö™ D√âCONNEXION FORC√âE CORRIG√âE...');
  
  try {
    const supabase = window.supabase;
    
    // Nettoyage complet
    localStorage.clear();
    sessionStorage.clear();
    
    // D√©connexion Supabase avec gestion d'erreur
    try {
      await supabase.auth.signOut();
      console.log('‚úÖ D√©connexion Supabase r√©ussie');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur d√©connexion Supabase:', error.message);
    }
    
    // Redirection forc√©e
    console.log('üîÑ Redirection vers /connexion...');
    window.location.replace('/connexion');
    
  } catch (error) {
    console.log('‚ùå Erreur d√©connexion forc√©e:', error.message);
    window.location.replace('/connexion');
  }
};

// Rendre les fonctions disponibles globalement
window.diagnosticComplet = diagnosticComplet;
window.deconnexionForceeCorrigee = deconnexionForceeCorrigee;
window.diagnosticSupabaseAuth = diagnosticSupabaseAuth;
window.diagnosticTableUsers = diagnosticTableUsers;

// Ex√©cution automatique
console.log('üéØ COMMANDES DISPONIBLES:');
console.log('‚Ä¢ diagnosticComplet() - Diagnostic complet');
console.log('‚Ä¢ deconnexionForceeCorrigee() - D√©connexion forc√©e');
console.log('');
console.log('üöÄ Ex√©cution automatique du diagnostic...');
diagnosticComplet();
