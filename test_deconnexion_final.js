// üß™ TEST D√âCONNEXION FINAL - FINITIO
// ====================================
// Script de test et diagnostic pour la d√©connexion

console.log('üß™ D√âMARRAGE TEST D√âCONNEXION FINITIO');

// 1. DIAGNOSTIC √âTAT ACTUEL
function diagnosticEtat() {
    console.log('üìä DIAGNOSTIC √âTAT ACTUEL:');
    console.log('- localStorage:', Object.keys(localStorage));
    console.log('- sessionStorage:', Object.keys(sessionStorage));
    console.log('- URL actuelle:', window.location.href);
    
    // V√©rifier Supabase
    if (window.supabase) {
        console.log('‚úÖ Supabase disponible');
        window.supabase.auth.getUser().then(({data}) => {
            console.log('- Utilisateur Supabase:', data.user?.email || 'Aucun');
        });
    } else {
        console.log('‚ùå Supabase non disponible');
    }
}

// 2. D√âCONNEXION MANUELLE FORC√âE
async function deconnexionManuelle() {
    console.log('üö™ D√âCONNEXION MANUELLE FORC√âE...');
    
    try {
        // Nettoyage complet
        localStorage.clear();
        sessionStorage.clear();
        console.log('‚úÖ Stockage nettoy√©');
        
        // D√©connexion Supabase si disponible
        if (window.supabase) {
            await window.supabase.auth.signOut();
            console.log('‚úÖ Supabase d√©connect√©');
        }
        
        // Redirection imm√©diate
        console.log('üîÑ Redirection vers /connexion...');
        window.location.replace('/connexion');
        
    } catch (error) {
        console.error('‚ùå Erreur:', error);
        // Redirection de secours
        window.location.href = '/connexion';
    }
}

// 3. TEST BOUTONS EXISTANTS
function testBoutons() {
    console.log('üîç RECHERCHE BOUTONS D√âCONNEXION...');
    
    // Chercher tous les boutons possibles
    const selectors = [
        'button[onclick*="logout"]',
        'button[onclick*="d√©connexion"]',
        'button:contains("D√©connecter")',
        'button:contains("D√©connexion")',
        '[class*="logout"]',
        '[class*="deconnexion"]'
    ];
    
    let boutonsFound = 0;
    selectors.forEach(selector => {
        try {
            const elements = document.querySelectorAll(selector);
            if (elements.length > 0) {
                console.log(`‚úÖ Trouv√© ${elements.length} √©l√©ment(s) avec: ${selector}`);
                elements.forEach((el, i) => {
                    console.log(`  - Bouton ${i+1}:`, el.outerHTML.substring(0, 100) + '...');
                });
                boutonsFound += elements.length;
            }
        } catch (e) {
            // Ignorer les s√©lecteurs CSS invalides
        }
    });
    
    if (boutonsFound === 0) {
        console.log('‚ùå Aucun bouton de d√©connexion trouv√©');
    }
    
    // Chercher la fonction globale
    if (window.forceLogout) {
        console.log('‚úÖ Fonction window.forceLogout disponible');
    } else {
        console.log('‚ùå Fonction window.forceLogout non disponible');
    }
}

// 4. EX√âCUTION AUTOMATIQUE
console.log('üöÄ EX√âCUTION TESTS...');
diagnosticEtat();
testBoutons();

// 5. FONCTIONS DISPONIBLES GLOBALEMENT
window.testDeconnexion = {
    diagnostic: diagnosticEtat,
    deconnexion: deconnexionManuelle,
    testBoutons: testBoutons
};

console.log('‚úÖ TESTS TERMIN√âS - Fonctions disponibles:');
console.log('- testDeconnexion.diagnostic()');
console.log('- testDeconnexion.deconnexion()');
console.log('- testDeconnexion.testBoutons()');
console.log('');
console.log('üí° SOLUTION RAPIDE: testDeconnexion.deconnexion()');
