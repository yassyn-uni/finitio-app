// üß™ SCRIPT DE TEST D√âCONNEXION SIMPLIFI√â
// Copiez-collez ce code dans la console (F12) de votre navigateur

console.log('üß™ TEST D√âCONNEXION FINITIO - VERSION SIMPLIFI√âE');
console.log('================================================');

// Test imm√©diat de la fonction de d√©connexion globale
if (window.forceLogout) {
  console.log('‚úÖ Fonction forceLogout d√©tect√©e !');
  console.log('üí° Tapez: window.forceLogout() pour tester');
} else {
  console.log('‚ùå Fonction forceLogout non trouv√©e');
}

// Fonction de test des boutons
const testBoutons = () => {
  console.log('üîç Recherche des boutons de d√©connexion...');
  
  // Chercher tous les boutons
  const tousLesBoutons = document.querySelectorAll('button');
  console.log(`üìä ${tousLesBoutons.length} boutons trouv√©s au total`);
  
  // Filtrer les boutons de d√©connexion
  const boutonsDeconnexion = Array.from(tousLesBoutons).filter(btn => {
    const texte = btn.textContent.toLowerCase();
    return texte.includes('d√©connecter') || 
           texte.includes('d√©connexion') || 
           texte.includes('üö™') ||
           btn.title?.toLowerCase().includes('d√©connecter');
  });
  
  console.log(`üö™ ${boutonsDeconnexion.length} bouton(s) de d√©connexion trouv√©(s):`);
  
  boutonsDeconnexion.forEach((btn, index) => {
    console.log(`  ${index + 1}. "${btn.textContent.trim()}" - Classes: ${btn.className}`);
    
    // Tester si le bouton est cliquable
    if (btn.disabled) {
      console.log(`     ‚ö†Ô∏è Bouton d√©sactiv√©`);
    } else {
      console.log(`     ‚úÖ Bouton actif`);
    }
    
    // Ajouter un √©couteur de test
    btn.addEventListener('click', () => {
      console.log(`üñ±Ô∏è CLIC D√âTECT√â sur bouton ${index + 1}`);
    }, { once: true });
  });
  
  return boutonsDeconnexion;
};

// Fonction de diagnostic de l'√©tat
const diagnosticEtat = () => {
  console.log('üìä DIAGNOSTIC DE L\'√âTAT ACTUEL:');
  console.log('================================');
  
  // V√©rifier le localStorage
  const localStorageKeys = Object.keys(localStorage);
  console.log('üíæ localStorage:', localStorageKeys.length > 0 ? localStorageKeys : 'Vide');
  
  // V√©rifier le sessionStorage
  const sessionStorageKeys = Object.keys(sessionStorage);
  console.log('üíæ sessionStorage:', sessionStorageKeys.length > 0 ? sessionStorageKeys : 'Vide');
  
  // V√©rifier les cookies
  console.log('üç™ Cookies:', document.cookie || 'Aucun');
  
  // V√©rifier l'URL
  console.log('üåê URL actuelle:', window.location.href);
  
  // V√©rifier si on est sur une page de dashboard
  const isDashboard = window.location.pathname.includes('dashboard');
  console.log('üìç Sur dashboard:', isDashboard ? 'OUI' : 'NON');
  
  return {
    localStorage: localStorageKeys,
    sessionStorage: sessionStorageKeys,
    cookies: document.cookie,
    url: window.location.href,
    isDashboard
  };
};

// Fonction de test de d√©connexion manuelle
const testDeconnexionManuelle = () => {
  console.log('üö™ TEST DE D√âCONNEXION MANUELLE...');
  
  // Nettoyer le stockage
  localStorage.clear();
  sessionStorage.clear();
  console.log('‚úÖ Stockage nettoy√©');
  
  // Supprimer les cookies
  document.cookie.split(";").forEach(function(c) { 
    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
  });
  console.log('‚úÖ Cookies supprim√©s');
  
  // Redirection forc√©e
  console.log('üîÑ Redirection vers /connexion...');
  setTimeout(() => {
    window.location.replace('/connexion');
  }, 1000);
};

// Fonction pour forcer un clic sur le bouton de d√©connexion
const forcerClicDeconnexion = () => {
  const boutons = testBoutons();
  if (boutons.length > 0) {
    console.log('üñ±Ô∏è Simulation clic sur le premier bouton de d√©connexion...');
    boutons[0].click();
  } else {
    console.log('‚ùå Aucun bouton de d√©connexion trouv√© pour cliquer');
  }
};

// Ex√©cution automatique du diagnostic
console.log('üöÄ Ex√©cution du diagnostic automatique...');
diagnosticEtat();
testBoutons();

// Rendre les fonctions disponibles globalement
window.testBoutons = testBoutons;
window.diagnosticEtat = diagnosticEtat;
window.testDeconnexionManuelle = testDeconnexionManuelle;
window.forcerClicDeconnexion = forcerClicDeconnexion;

console.log('');
console.log('üìã COMMANDES DISPONIBLES:');
console.log('========================');
console.log('‚Ä¢ testBoutons() - Analyser les boutons de d√©connexion');
console.log('‚Ä¢ diagnosticEtat() - V√©rifier l\'√©tat actuel');
console.log('‚Ä¢ testDeconnexionManuelle() - D√©connexion manuelle forc√©e');
console.log('‚Ä¢ forcerClicDeconnexion() - Simuler un clic sur le bouton');
console.log('‚Ä¢ window.forceLogout() - Utiliser la fonction globale (si disponible)');
console.log('');
console.log('üí° SOLUTION RAPIDE: Tapez testDeconnexionManuelle() pour forcer la d√©connexion');
